!function(e){function t(e){var t=require("./"+e+"."+o+".hot-update.js");!function(e,t){if(!A[e]||!m[e])return;for(var n in m[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===b&&P()}(t.id,t.modules)}var n,r=!0,o="6c1d006fd725633db4c9",i={},c=[],s=[];function a(e){var t=I[e];if(!t)return x;var r=function(r){return t.hot.active?(I[r]?-1===I[r].parents.indexOf(e)&&I[r].parents.push(e):(c=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),c=[]),x(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return x[e]},set:function(t){x[e]=t}}};for(var i in x)Object.prototype.hasOwnProperty.call(x,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===p&&l("prepare"),b++,x.e(e).then(t,(function(e){throw t(),e}));function t(){b--,"prepare"===p&&(g[e]||w(e),0===b&&0===v&&P())}},r.t=function(e,t){return 1&t&&(e=r(e)),x.t(e,-2&t)},r}function u(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:D,apply:O,status:function(e){if(!e)return p;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:i[e]};return n=void 0,t}var d=[],p="idle";function l(e){p=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var f,h,y,v=0,b=0,g={},m={},A={};function j(e){return+e+""===e?+e:e}function D(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return r=e,l("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then((function(e){if(!e)return l("idle"),null;m={},g={},A=e.c,y=e.h,l("prepare");var t=new Promise((function(e,t){f={resolve:e,reject:t}}));h={};return w(0),"prepare"===p&&0===b&&0===v&&P(),t}))}function w(e){A[e]?(m[e]=!0,v++,t(e)):g[e]=!0}function P(){l("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then((function(){return O(r)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(j(n));e.resolve(t)}}function O(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,r,s,a,u;function d(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,c=o.chain;if((a=I[i])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(a.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var s=0;s<a.parents.length;s++){var u=a.parents[s],d=I[u];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(d.hot._acceptedDependencies[i]?(n[u]||(n[u]=[]),f(n[u],[i])):(delete n[u],t.push(u),r.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var v={},b=[],g={},m=function(){console.warn("[HMR] unexpected require("+w.moduleId+") to disposed module")};for(var D in h)if(Object.prototype.hasOwnProperty.call(h,D)){var w;u=j(D);var P=!1,O=!1,_=!1,C="";switch((w=h[D]?d(u):{type:"disposed",moduleId:D}).chain&&(C="\nUpdate propagation: "+w.chain.join(" -> ")),w.type){case"self-declined":t.onDeclined&&t.onDeclined(w),t.ignoreDeclined||(P=new Error("Aborted because of self decline: "+w.moduleId+C));break;case"declined":t.onDeclined&&t.onDeclined(w),t.ignoreDeclined||(P=new Error("Aborted because of declined dependency: "+w.moduleId+" in "+w.parentId+C));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(w),t.ignoreUnaccepted||(P=new Error("Aborted because "+u+" is not accepted"+C));break;case"accepted":t.onAccepted&&t.onAccepted(w),O=!0;break;case"disposed":t.onDisposed&&t.onDisposed(w),_=!0;break;default:throw new Error("Unexception type "+w.type)}if(P)return l("abort"),Promise.reject(P);if(O)for(u in g[u]=h[u],f(b,w.outdatedModules),w.outdatedDependencies)Object.prototype.hasOwnProperty.call(w.outdatedDependencies,u)&&(v[u]||(v[u]=[]),f(v[u],w.outdatedDependencies[u]));_&&(f(b,[w.moduleId]),g[u]=m)}var E,H=[];for(r=0;r<b.length;r++)u=b[r],I[u]&&I[u].hot._selfAccepted&&g[u]!==m&&H.push({module:u,errorHandler:I[u].hot._selfAccepted});l("dispose"),Object.keys(A).forEach((function(e){!1===A[e]&&function(e){delete installedChunks[e]}(e)}));for(var S,T,N=b.slice();N.length>0;)if(u=N.pop(),a=I[u]){var k={},B=a.hot._disposeHandlers;for(s=0;s<B.length;s++)(n=B[s])(k);for(i[u]=k,a.hot.active=!1,delete I[u],delete v[u],s=0;s<a.children.length;s++){var U=I[a.children[s]];U&&((E=U.parents.indexOf(u))>=0&&U.parents.splice(E,1))}}for(u in v)if(Object.prototype.hasOwnProperty.call(v,u)&&(a=I[u]))for(T=v[u],s=0;s<T.length;s++)S=T[s],(E=a.children.indexOf(S))>=0&&a.children.splice(E,1);for(u in l("apply"),o=y,g)Object.prototype.hasOwnProperty.call(g,u)&&(e[u]=g[u]);var q=null;for(u in v)if(Object.prototype.hasOwnProperty.call(v,u)&&(a=I[u])){T=v[u];var M=[];for(r=0;r<T.length;r++)if(S=T[r],n=a.hot._acceptedDependencies[S]){if(-1!==M.indexOf(n))continue;M.push(n)}for(r=0;r<M.length;r++){n=M[r];try{n(T)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:T[r],error:e}),t.ignoreErrored||q||(q=e)}}}for(r=0;r<H.length;r++){var $=H[r];u=$.module,c=[u];try{x(u)}catch(e){if("function"==typeof $.errorHandler)try{$.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||q||(q=n),q||(q=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||q||(q=e)}}return q?(l("fail"),Promise.reject(q)):(l("idle"),new Promise((function(e){e(b)})))}var I={};function x(t){if(I[t])return I[t].exports;var n=I[t]={i:t,l:!1,exports:{},hot:u(t),parents:(s=c,c=[],s),children:[]};return e[t].call(n.exports,n,n.exports,a(t)),n.l=!0,n.exports}x.m=e,x.c=I,x.d=function(e,t,n){x.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},x.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},x.t=function(e,t){if(1&t&&(e=x(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(x.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)x.d(n,r,function(t){return e[t]}.bind(null,r));return n},x.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return x.d(t,"a",t),t},x.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},x.p="/Users/saifurrehman/Desktop/POCs/cumulus-bank/Accounts-Microservice/dist",x.h=function(){return o},a(6)(x.s=6)}([function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("debug")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("express-session")},function(e,t,n){n(7),e.exports=n(9)},function(e,t){e.exports=require("@babel/polyfill")},function(e,t){e.exports=require("reflect-metadata")},function(e,t,n){"use strict";n.r(t);var r=n(4),o=n.n(r),i=n(2),c=n.n(i),s=n(1),a=n.n(s),u=n(3),d=n.n(u),p=n(5),l=n.n(p),f=n(0),h=f.Schema,y=new h({Product:String,Price:Number,Type:String,Payed:Boolean}),v=new h({Product:String,Price:Number,AccountID:String,AccountName:String,Type:String,Date:String}),b=new h({Activate:Boolean,Balance:Number,CuurentSpending:Number,AccountName:String}),g=new h({Balance:Number,CuurentSpending:Number,AccountName:String}),m=new h({ID:Number,Account:[b],CurrentAccount:[g],Transaction:[v],Billing:[y]}),A=f.model("Account",m),j=function(){function e(){}return e.prototype.addNewAccount=function(e,t){t.setHeader("Content-Type","application/json"),new A(e.body).save((function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.getAccount=function(e,t){t.setHeader("Content-Type","application/json"),A.find({},(function(e,n){e?t.status(404).json({err:e}):t.status(200).send(n)}))},e.prototype.getAccountById=function(e,t){t.setHeader("Content-Type","application/json"),A.findById(e.params.ID,(function(e,n){e?t.status(404).json({err:e}):t.status(200).send(n)}))},e.prototype.getAccountByID=function(e,t){t.setHeader("Content-Type","application/json"),A.find({ID:e.params.ID},(function(e,n){e?t.status(404).json({err:e}):t.status(200).send(n)}))},e.prototype.updateAccount=function(e,t){t.setHeader("Content-Type","application/json"),A.findOneAndUpdate({_id:e.params.ID},e.body,{new:!0},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.activate=function(e,t){t.setHeader("Content-Type","application/json"),A.update({"Account._id":e.body.ID},{$set:{"Account.$.Activate":!0,"Account.$.Balance":1e4}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.paybill=function(e,t){t.setHeader("Content-Type","application/json"),A.update({"Billing._id":e.body.ID},{$set:{"Billing.$.Payed":!0,"Billing.$.Price":0}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.balanceUpdate=function(e,t){t.setHeader("Content-Type","application/json"),A.update({"Account._id":e.body.ID},{$set:{"Account.$.Balance":e.body.balance}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.addTransaction=function(e,t){t.setHeader("Content-Type","application/json"),A.update({_id:e.body.ID},{$push:{Transaction:{Product:e.body.Product,Price:e.body.Price,AccountID:e.body.AccountID,AccountName:e.body.AccountName,Type:e.body.Type,Date:e.body.Date}}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.deleteAccount=function(e,t){t.setHeader("Content-Type","application/json"),A.deleteOne({_id:e.params.ID},(function(e){e?t.status(404).json({err:e}):t.json({message:"success"})}))},e}(),D=(n(8),(new(function(){function e(){this.accountController=new j,this.router=Object(s.Router)(),this.routes()}return e.prototype.routes=function(){this.router.get("/healthz",(function(e,t){t.status(200).send({success:"ok"})})),this.router.get("/listAccount",(function(e,t,n){n()}),this.accountController.getAccount),this.router.post("/listAccount",(function(e,t,n){n()}),this.accountController.addNewAccount),this.router.post("/activate",(function(e,t,n){n()}),this.accountController.activate),this.router.post("/bill",(function(e,t,n){n()}),this.accountController.paybill),this.router.post("/balanceUpdate",(function(e,t,n){n()}),this.accountController.balanceUpdate),this.router.post("/transaction",(function(e,t,n){n()}),this.accountController.addTransaction),this.router.get("/listAccount/:ID",(function(e,t,n){n()}),this.accountController.getAccountById),this.router.get("/listAccountID/:ID",(function(e,t,n){n()}),this.accountController.getAccountByID),this.router.put("/listAccount/:ID",(function(e,t,n){n()}),this.accountController.updateAccount),this.router.delete("/listAccount/:ID",(function(e,t,n){n()}),this.accountController.deleteAccount)},e}())).router),w=n(0);w.Promise=Promise;var P=(new(function(){function e(){this.mongoUrl="mongodb://localhost:27017/admin",this.express=a()(),this.middleware(),this.routes(),this.mongoSetup()}return e.prototype.mongoSetup=function(){w.Promise=global.Promise,w.connect(this.mongoUrl)},e.prototype.middleware=function(){this.express.use((function(e,t,n){t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Headers","X-Requested-With,content-type"),t.header("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, PATCH, DELETE"),n()})),this.express.use(d.a.json()),this.express.use(d.a.urlencoded({extended:!1})),this.express.use(l()({secret:"test123",saveUninitialized:!1,resave:!0}))},e.prototype.routes=function(){this.express.get("/",(function(e,t){t.send("hi")})),this.express.use("/",D)},e}())).express;c()("ts-express:server"),new function(){var e=this;this.normalizePort=function(e){var t="string"==typeof e?parseInt(e,10):e;return isNaN(t)?e:t>=0&&t},this.onError=function(t){if("listen"!==t.syscall)throw t;var n="string"==typeof e.port?"Pipe "+e.port:"Port "+e.port;switch(t.code){case"EACCES":console.error(n+" requires elevated privileges"),process.exit(1);break;case"EADDRINUSE":console.error(n+" is already in use"),process.exit(1);break;default:throw t}},this.onListening=function(){console.log("listening on "+e.port);var t=e.server.address(),n="string"==typeof t?"pipe "+t:"port "+t.port;c()("Listening on "+n)},this.port=this.normalizePort(8082),P.set("port",this.port),this.server=o.a.createServer(P),this.server.listen(this.port),this.server.on("error",this.onError),this.server.on("listening",this.onListening)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwibW9uZ29vc2VcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJleHByZXNzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZGVidWdcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJib2R5LXBhcnNlclwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImh0dHBcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJleHByZXNzLXNlc3Npb25cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAYmFiZWwvcG9seWZpbGxcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyZWZsZWN0LW1ldGFkYXRhXCIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xsZXJzL2xpc3RpbmcvbGliL21vZGVscy9jcm1Nb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvbGlzdGluZy9saWIvY29udHJvbGxlcnMvY3JtQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvbGlzdGluZy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJob3REb3dubG9hZFVwZGF0ZUNodW5rIiwiY2h1bmtJZCIsImNodW5rIiwicmVxdWlyZSIsImhvdEN1cnJlbnRIYXNoIiwibW9yZU1vZHVsZXMiLCJob3RBdmFpbGFibGVGaWxlc01hcCIsImhvdFJlcXVlc3RlZEZpbGVzTWFwIiwibW9kdWxlSWQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJob3RVcGRhdGUiLCJob3RXYWl0aW5nRmlsZXMiLCJob3RDaHVua3NMb2FkaW5nIiwiaG90VXBkYXRlRG93bmxvYWRlZCIsImhvdEFkZFVwZGF0ZUNodW5rIiwiaWQiLCJtb2R1bGVzIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdEN1cnJlbnRNb2R1bGVEYXRhIiwiaG90Q3VycmVudFBhcmVudHMiLCJob3RDdXJyZW50UGFyZW50c1RlbXAiLCJob3RDcmVhdGVSZXF1aXJlIiwibWUiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImZuIiwicmVxdWVzdCIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImNoaWxkcmVuIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3RGYWN0b3J5IiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZSIsImhvdFN0YXR1cyIsImhvdFNldFN0YXR1cyIsInRoZW4iLCJmaW5pc2hDaHVua0xvYWRpbmciLCJlcnIiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsInQiLCJtb2RlIiwiaG90Q3JlYXRlTW9kdWxlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfZGlzcG9zZUhhbmRsZXJzIiwiX21haW4iLCJhY2NlcHQiLCJkZXAiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsImkiLCJsZW5ndGgiLCJkZWNsaW5lIiwiZGlzcG9zZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpZHgiLCJzcGxpY2UiLCJjaGVjayIsImhvdENoZWNrIiwiYXBwbHkiLCJob3RBcHBseSIsInN0YXR1cyIsImwiLCJob3RTdGF0dXNIYW5kbGVycyIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwiZGF0YSIsIm5ld1N0YXR1cyIsImhvdERlZmVycmVkIiwiaG90VXBkYXRlTmV3SGFzaCIsInRvTW9kdWxlSWQiLCJFcnJvciIsInVwZGF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiaG90RG93bmxvYWRNYW5pZmVzdCIsImMiLCJoIiwicHJvbWlzZSIsInJlamVjdCIsImRlZmVycmVkIiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImNiIiwiaiIsIm1vZHVsZSIsImdldEFmZmVjdGVkU3R1ZmYiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJtYXAiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBvcCIsInR5cGUiLCJwYXJlbnRJZCIsInBhcmVudCIsImNvbmNhdCIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwic2xpY2UiLCJkaXNwb3NlSGFuZGxlcnMiLCJjaGlsZCIsImVycm9yIiwiY2FsbGJhY2tzIiwib25FcnJvcmVkIiwiZGVwZW5kZW5jeUlkIiwiaWdub3JlRXJyb3JlZCIsImVycjIiLCJvcmlnaW5hbEVycm9yIiwiZXhwb3J0cyIsIm0iLCJkIiwiZ2V0dGVyIiwibyIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwicyIsIlNjaGVtYSIsIkJpbGxpbmciLCJQcm9kdWN0IiwiU3RyaW5nIiwiUHJpY2UiLCJOdW1iZXIiLCJUeXBlIiwiUGF5ZWQiLCJCb29sZWFuIiwiVHJhbnNhY3Rpb24iLCJBY2NvdW50SUQiLCJBY2NvdW50TmFtZSIsIkRhdGUiLCJBY2NvdW50SW5mb1NjaGVtYSIsIkFjdGl2YXRlIiwiQmFsYW5jZSIsIkN1dXJlbnRTcGVuZGluZyIsIkN1cnJlbnRBY2NvdW50IiwiQWNjb3VudFNjaGVtYSIsIklEIiwiQWNjb3VudCIsIkFjY291bnRDb250cm9sbGVyIiwiYWRkTmV3QWNjb3VudCIsInJlcSIsInJlcyIsInNldEhlYWRlciIsImJvZHkiLCJzYXZlIiwiYWNjb3VudCIsImpzb24iLCJnZXRBY2NvdW50IiwiZmluZCIsInNlbmQiLCJnZXRBY2NvdW50QnlJZCIsImZpbmRCeUlkIiwicGFyYW1zIiwiZ2V0QWNjb3VudEJ5SUQiLCJ1cGRhdGVBY2NvdW50IiwiZmluZE9uZUFuZFVwZGF0ZSIsIl9pZCIsIm5ldyIsImFjdGl2YXRlIiwiJHNldCIsInBheWJpbGwiLCJiYWxhbmNlVXBkYXRlIiwiYmFsYW5jZSIsImFkZFRyYW5zYWN0aW9uIiwiJHB1c2giLCJkZWxldGVBY2NvdW50IiwiZGVsZXRlT25lIiwibWVzc2FnZSIsIkxpc3RpbmdNb25nb0NvbnRyb2xsZXIiLCJ0aGlzIiwiYWNjb3VudENvbnRyb2xsZXIiLCJyb3V0ZXIiLCJyb3V0ZXMiLCJfIiwic3VjY2VzcyIsIm5leHQiLCJwb3N0IiwicHV0IiwiZGVsZXRlIiwibW9uZ29vc2UiLCJBcHAiLCJtb25nb1VybCIsImV4cHJlc3MiLCJtaWRkbGV3YXJlIiwibW9uZ29TZXR1cCIsImdsb2JhbCIsImNvbm5lY3QiLCJ1c2UiLCJoZWFkZXIiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJzZWNyZXQiLCJzYXZlVW5pbml0aWFsaXplZCIsInJlc2F2ZSIsIl90aGlzIiwibm9ybWFsaXplUG9ydCIsInZhbCIsInBvcnQiLCJwYXJzZUludCIsImlzTmFOIiwib25FcnJvciIsInN5c2NhbGwiLCJjb2RlIiwicHJvY2VzcyIsImV4aXQiLCJvbkxpc3RlbmluZyIsImxvZyIsImFkZHIiLCJzZXJ2ZXIiLCJhZGRyZXNzIiwiY3JlYXRlU2VydmVyIiwibGlzdGVuIiwib24iXSwibWFwcGluZ3MiOiJhQUNFLFNBQVNBLEVBQXVCQyxHQUMvQixJQUFJQyxFQUFRQyxRQUFRLEtBQVlGLEVBQVUsSUFBTUcsRUFBaUIsbUJBME9sRSxTQUEyQkgsRUFBU0ksR0FDbkMsSUFBS0MsRUFBcUJMLEtBQWFNLEVBQXFCTixHQUMzRCxPQUVELElBQUssSUFBSU8sS0FEVEQsRUFBcUJOLElBQVcsRUFDWEksRUFDaEJJLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtQLEVBQWFHLEtBQ3JESyxFQUFVTCxHQUFZSCxFQUFZRyxJQUdWLEtBQXBCTSxHQUE4QyxJQUFyQkMsR0FDOUJDLElBblBEQyxDQUFrQmYsRUFBTWdCLEdBQUloQixFQUFNaUIsU0FrQm5DLElBS0lDLEVBTEFDLEdBQW1CLEVBRW5CakIsRUFBaUIsdUJBRWpCa0IsRUFBdUIsR0FHdkJDLEVBQW9CLEdBRXBCQyxFQUF3QixHQUc1QixTQUFTQyxFQUFpQmpCLEdBQ3pCLElBQUlrQixFQUFLQyxFQUFpQm5CLEdBQzFCLElBQUtrQixFQUFJLE9BQU9FLEVBQ2hCLElBQUlDLEVBQUssU0FBU0MsR0FzQmpCLE9BckJJSixFQUFHSyxJQUFJQyxRQUNOTCxFQUFpQkcsSUFDeUMsSUFBekRILEVBQWlCRyxHQUFTRyxRQUFRQyxRQUFRMUIsSUFDN0NtQixFQUFpQkcsR0FBU0csUUFBUUUsS0FBSzNCLElBR3hDZSxFQUFvQixDQUFDZixHQUNyQlksRUFBd0JVLElBRWEsSUFBbENKLEVBQUdVLFNBQVNGLFFBQVFKLElBQ3ZCSixFQUFHVSxTQUFTRCxLQUFLTCxLQUdsQk8sUUFBUUMsS0FDUCw0QkFDQ1IsRUFDQSwwQkFDQXRCLEdBRUZlLEVBQW9CLElBRWRLLEVBQW9CRSxJQUV4QlMsRUFBZ0IsU0FBdUJDLEdBQzFDLE1BQU8sQ0FDTkMsY0FBYyxFQUNkQyxZQUFZLEVBQ1pD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LE9BQVMsSUFBS0UsYUFBYSxHQUNoQ3pDLEtBQUt1QyxPQUFPRyxPQUFPMUMsS0FBSzRCLE1BQ3hCNUIsS0FBS3VDLE9BQU9JLEdBQUcsUUFBUzNDLEtBQUsrQixTQUM3Qi9CLEtBQUt1QyxPQUFPSSxHQUFHLFlBQWEzQyxLQUFLb0MiLCJmaWxlIjoiYnVuZGxlLWJlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0dmFyIGNodW5rID0gcmVxdWlyZShcIi4vXCIgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCIpO1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVuay5pZCwgY2h1bmsubW9kdWxlcyk7XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdCgpIHtcbiBcdFx0dHJ5IHtcbiBcdFx0XHR2YXIgdXBkYXRlID0gcmVxdWlyZShcIi4vXCIgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIik7XG4gXHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gXHRcdH1cbiBcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh1cGRhdGUpO1xuIFx0fVxuXG4gXHQvL2VzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcIjZjMWQwMDZmZDcyNTYzM2RiNGM5XCI7XG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCIgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwidFwiXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbiBcdFx0XHRcdHRocm93IGVycjtcbiBcdFx0XHR9KTtcblxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4gXHRcdFx0XHRcdGlmICghaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9O1xuIFx0XHRmbi50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0XHRpZiAobW9kZSAmIDEpIHZhbHVlID0gZm4odmFsdWUpO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnQodmFsdWUsIG1vZGUgJiB+MSk7XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0fSxcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXG4gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGlmICghbCkgcmV0dXJuIGhvdFN0YXR1cztcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cbiBcdFx0fTtcbiBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuIFx0XHRyZXR1cm4gaG90O1xuIFx0fVxuXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcblxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuIFx0fVxuXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XG4gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdERlZmVycmVkO1xuXG4gXHQvLyBUaGUgdXBkYXRlIGluZm9cbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbiBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIikge1xuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuIFx0XHR9XG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xuIFx0XHRcdGlmICghdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRcdFx0cmV0dXJuIG51bGw7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XG5cbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRob3REZWZlcnJlZCA9IHtcbiBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcbiBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0aG90VXBkYXRlID0ge307XG4gXHRcdFx0dmFyIGNodW5rSWQgPSAwO1xuIFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xuIFx0XHRcdHtcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG4gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0XHRcdFx0aWYgKFxuIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHRcdFx0XHQpXG4gXHRcdFx0XHRcdFx0KSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJlxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQgJiZcbiBcdFx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcbiBcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmVcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdFx0fSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcblxuIFx0XHR2YXIgaWR4O1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cbiBcdFx0dmFyIGRlcGVuZGVuY3k7XG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxuIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihjYikgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZiAoZXJyb3IpIHtcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gXHRcdH1cblxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9Vc2Vycy9zYWlmdXJyZWhtYW4vRGVza3RvcC9QT0NzL2N1bXVsdXMtYmFuay9BY2NvdW50cy1NaWNyb3NlcnZpY2UvZGlzdFwiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoNikoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNik7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJtb25nb29zZVwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJleHByZXNzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImRlYnVnXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJvZHktcGFyc2VyXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImh0dHBcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXhwcmVzcy1zZXNzaW9uXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIkBiYWJlbC9wb2x5ZmlsbFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWZsZWN0LW1ldGFkYXRhXCIpOyIsImltcG9ydCAqIGFzIG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcbnZhciBTY2hlbWEgPSBtb25nb29zZS5TY2hlbWE7XG52YXIgQmlsbGluZyA9IG5ldyBTY2hlbWEoe1xuICAgIFByb2R1Y3Q6IFN0cmluZyxcbiAgICBQcmljZTogTnVtYmVyLFxuICAgIFR5cGU6IFN0cmluZyxcbiAgICBQYXllZDogQm9vbGVhblxufSk7XG52YXIgVHJhbnNhY3Rpb24gPSBuZXcgU2NoZW1hKHtcbiAgICBQcm9kdWN0OiBTdHJpbmcsXG4gICAgUHJpY2U6IE51bWJlcixcbiAgICBBY2NvdW50SUQ6IFN0cmluZyxcbiAgICBBY2NvdW50TmFtZTogU3RyaW5nLFxuICAgIFR5cGU6IFN0cmluZyxcbiAgICBEYXRlOiBTdHJpbmdcbn0pO1xudmFyIEFjY291bnRJbmZvU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgQWN0aXZhdGU6IEJvb2xlYW4sXG4gICAgQmFsYW5jZTogTnVtYmVyLFxuICAgIEN1dXJlbnRTcGVuZGluZzogTnVtYmVyLFxuICAgIEFjY291bnROYW1lOiBTdHJpbmdcbn0pO1xudmFyIEN1cnJlbnRBY2NvdW50ID0gbmV3IFNjaGVtYSh7XG4gICAgQmFsYW5jZTogTnVtYmVyLFxuICAgIEN1dXJlbnRTcGVuZGluZzogTnVtYmVyLFxuICAgIEFjY291bnROYW1lOiBTdHJpbmdcbn0pO1xuZXhwb3J0IHZhciBBY2NvdW50U2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgSUQ6IE51bWJlcixcbiAgICBBY2NvdW50OiBbQWNjb3VudEluZm9TY2hlbWFdLFxuICAgIEN1cnJlbnRBY2NvdW50OiBbQ3VycmVudEFjY291bnRdLFxuICAgIFRyYW5zYWN0aW9uOiBbVHJhbnNhY3Rpb25dLFxuICAgIEJpbGxpbmc6IFtCaWxsaW5nXVxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZM0p0VFc5a1pXd3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk4dUxpOHVMaTh1TGk5emNtTXZZMjl1ZEhKdmJHeGxjbk12YkdsemRHbHVaeTlzYVdJdmJXOWtaV3h6TDJOeWJVMXZaR1ZzTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTlCUVU4c1MwRkJTeXhSUVVGUkxFMUJRVTBzVlVGQlZTeERRVUZETzBGQlJYSkRMRWxCUVUwc1RVRkJUU3hIUVVGSExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTTdRVUZETDBJc1NVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTeE5RVUZOTEVOQlFVTTdTVUZEZGtJc1QwRkJUeXhGUVVGRkxFMUJRVTA3U1VGRFppeExRVUZMTEVWQlFVVXNUVUZCVFR0SlFVTmlMRWxCUVVrc1JVRkJSU3hOUVVGTk8wbEJRMW9zUzBGQlN5eEZRVUZGTEU5QlFVODdRMEZEYWtJc1EwRkJReXhEUVVGRE8wRkJRMGdzU1VGQlRTeFhRVUZYTEVkQlFVY3NTVUZCU1N4TlFVRk5MRU5CUVVNN1NVRkRNMElzVDBGQlR5eEZRVUZGTEUxQlFVMDdTVUZEWml4TFFVRkxMRVZCUVVVc1RVRkJUVHRKUVVOaUxGTkJRVk1zUlVGQlJTeE5RVUZOTzBsQlEycENMRmRCUVZjc1JVRkJSU3hOUVVGTk8wbEJRMjVDTEVsQlFVa3NSVUZCUlN4TlFVRk5PMGxCUTFvc1NVRkJTU3hGUVVGRkxFMUJRVTA3UTBGRFppeERRVUZETEVOQlFVTTdRVUZEU0N4SlFVRk5MR2xDUVVGcFFpeEhRVUZITEVsQlFVa3NUVUZCVFN4RFFVRkRPMGxCUTJwRExGRkJRVkVzUlVGQlJTeFBRVUZQTzBsQlEycENMRTlCUVU4c1JVRkJSU3hOUVVGTk8wbEJRMllzWlVGQlpTeEZRVUZGTEUxQlFVMDdTVUZEZGtJc1YwRkJWeXhGUVVGRkxFMUJRVTA3UTBGRGRFSXNRMEZCUXl4RFFVRkRPMEZCUTBnc1NVRkJUU3hqUVVGakxFZEJRVWNzU1VGQlNTeE5RVUZOTEVOQlFVTTdTVUZET1VJc1QwRkJUeXhGUVVGRkxFMUJRVTA3U1VGRFppeGxRVUZsTEVWQlFVVXNUVUZCVFR0SlFVTjJRaXhYUVVGWExFVkJRVVVzVFVGQlRUdERRVU4wUWl4RFFVRkRMRU5CUVVNN1FVRkRTQ3hOUVVGTkxFTkJRVU1zU1VGQlRTeGhRVUZoTEVkQlFVY3NTVUZCU1N4TlFVRk5MRU5CUVVNN1NVRkRjRU1zUlVGQlJTeEZRVUZGTEUxQlFVMDdTVUZEVml4UFFVRlBMRVZCUVVVc1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0SlFVTTFRaXhqUVVGakxFVkJRVVVzUTBGQlF5eGpRVUZqTEVOQlFVTTdTVUZEYUVNc1YwRkJWeXhGUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZETzBsQlEzcENMRTlCUVU4c1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF6dERRVU55UWl4RFFVRkRMRU5CUVVNaWZRPT0iLCJpbXBvcnQgKiBhcyBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCB7IEFjY291bnRTY2hlbWEgfSBmcm9tIFwiLi4vbW9kZWxzL2NybU1vZGVsXCI7XG52YXIgQWNjb3VudCA9IG1vbmdvb3NlLm1vZGVsKFwiQWNjb3VudFwiLCBBY2NvdW50U2NoZW1hKTtcbnZhciBBY2NvdW50Q29udHJvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBY2NvdW50Q29udHJvbGxlcigpIHtcbiAgICB9XG4gICAgQWNjb3VudENvbnRyb2xsZXIucHJvdG90eXBlLmFkZE5ld0FjY291bnQgPSBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgcmVzLnNldEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICAgIHZhciBuZXdBY2NvdW50ID0gbmV3IEFjY291bnQocmVxLmJvZHkpO1xuICAgICAgICBuZXdBY2NvdW50LnNhdmUoZnVuY3Rpb24gKGVyciwgYWNjb3VudCkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyOiBlcnIgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLmpzb24oYWNjb3VudCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWNjb3VudENvbnRyb2xsZXIucHJvdG90eXBlLmdldEFjY291bnQgPSBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgcmVzLnNldEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICAgIEFjY291bnQuZmluZCh7fSwgZnVuY3Rpb24gKGVyciwgYWNjb3VudCkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyOiBlcnIgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoYWNjb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWNjb3VudENvbnRyb2xsZXIucHJvdG90eXBlLmdldEFjY291bnRCeUlkID0gZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICBBY2NvdW50LmZpbmRCeUlkKHJlcS5wYXJhbXMuSUQsIGZ1bmN0aW9uIChlcnIsIGFjY291bnQpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycjogZXJyIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKGFjY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEFjY291bnRDb250cm9sbGVyLnByb3RvdHlwZS5nZXRBY2NvdW50QnlJRCA9IGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICByZXMuc2V0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgICAgQWNjb3VudC5maW5kKHsgSUQ6IHJlcS5wYXJhbXMuSUQgfSwgZnVuY3Rpb24gKGVyciwgYWNjb3VudCkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyOiBlcnIgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQoYWNjb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWNjb3VudENvbnRyb2xsZXIucHJvdG90eXBlLnVwZGF0ZUFjY291bnQgPSBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgcmVzLnNldEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICAgIEFjY291bnQuZmluZE9uZUFuZFVwZGF0ZSh7IF9pZDogcmVxLnBhcmFtcy5JRCB9LCByZXEuYm9keSwgeyBuZXc6IHRydWUgfSwgZnVuY3Rpb24gKGVyciwgYWNjb3VudCkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyOiBlcnIgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLmpzb24oYWNjb3VudCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWNjb3VudENvbnRyb2xsZXIucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICBBY2NvdW50LnVwZGF0ZSh7IFwiQWNjb3VudC5faWRcIjogcmVxLmJvZHkuSUQgfSwgeyAkc2V0OiB7IFwiQWNjb3VudC4kLkFjdGl2YXRlXCI6IHRydWUsIFwiQWNjb3VudC4kLkJhbGFuY2VcIjogMTAwMDAgfSB9LCBmdW5jdGlvbiAoZXJyLCBhY2NvdW50KSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnI6IGVyciB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMuanNvbihhY2NvdW50KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBBY2NvdW50Q29udHJvbGxlci5wcm90b3R5cGUucGF5YmlsbCA9IGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgICByZXMuc2V0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgICAgQWNjb3VudC51cGRhdGUoeyBcIkJpbGxpbmcuX2lkXCI6IHJlcS5ib2R5LklEIH0sIHsgJHNldDogeyBcIkJpbGxpbmcuJC5QYXllZFwiOiB0cnVlLCBcIkJpbGxpbmcuJC5QcmljZVwiOiAwIH0gfSwgZnVuY3Rpb24gKGVyciwgYWNjb3VudCkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyOiBlcnIgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLmpzb24oYWNjb3VudCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWNjb3VudENvbnRyb2xsZXIucHJvdG90eXBlLmJhbGFuY2VVcGRhdGUgPSBmdW5jdGlvbiAocmVxLCByZXMpIHtcbiAgICAgICAgcmVzLnNldEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICAgIEFjY291bnQudXBkYXRlKHsgXCJBY2NvdW50Ll9pZFwiOiByZXEuYm9keS5JRCB9LCB7ICRzZXQ6IHsgXCJBY2NvdW50LiQuQmFsYW5jZVwiOiByZXEuYm9keS5iYWxhbmNlIH0gfSwgZnVuY3Rpb24gKGVyciwgYWNjb3VudCkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyOiBlcnIgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzLmpzb24oYWNjb3VudCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQWNjb3VudENvbnRyb2xsZXIucHJvdG90eXBlLmFkZFRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICBBY2NvdW50LnVwZGF0ZSh7IF9pZDogcmVxLmJvZHkuSUQgfSwge1xuICAgICAgICAgICAgJHB1c2g6IHtcbiAgICAgICAgICAgICAgICBUcmFuc2FjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBcIlByb2R1Y3RcIjogcmVxLmJvZHkuUHJvZHVjdCxcbiAgICAgICAgICAgICAgICAgICAgXCJQcmljZVwiOiByZXEuYm9keS5QcmljZSxcbiAgICAgICAgICAgICAgICAgICAgXCJBY2NvdW50SURcIjogcmVxLmJvZHkuQWNjb3VudElELFxuICAgICAgICAgICAgICAgICAgICBcIkFjY291bnROYW1lXCI6IHJlcS5ib2R5LkFjY291bnROYW1lLFxuICAgICAgICAgICAgICAgICAgICBcIlR5cGVcIjogcmVxLmJvZHkuVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgXCJEYXRlXCI6IHJlcS5ib2R5LkRhdGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIsIGFjY291bnQpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycjogZXJyIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcy5qc29uKGFjY291bnQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEFjY291bnRDb250cm9sbGVyLnByb3RvdHlwZS5kZWxldGVBY2NvdW50ID0gZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgICAgIHJlcy5zZXRIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICBBY2NvdW50LmRlbGV0ZU9uZSh7IF9pZDogcmVxLnBhcmFtcy5JRCB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnI6IGVyciB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXMuanNvbih7IG1lc3NhZ2U6IFwic3VjY2Vzc1wiIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBBY2NvdW50Q29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnQgeyBBY2NvdW50Q29udHJvbGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWTNKdFEyOXVkSEp2Ykd4bGNpNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUx5NHVMeTR1TDNOeVl5OWpiMjUwY205c2JHVnljeTlzYVhOMGFXNW5MMnhwWWk5amIyNTBjbTlzYkdWeWN5OWpjbTFEYjI1MGNtOXNiR1Z5TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTlCUVU4c1MwRkJTeXhSUVVGUkxFMUJRVTBzVlVGQlZTeERRVUZETzBGQlEzSkRMRTlCUVU4c1JVRkJSU3hoUVVGaExFVkJRVVVzVFVGQlRTeHZRa0ZCYjBJc1EwRkJRenRCUVVkdVJDeEpRVUZOTEU5QlFVOHNSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVTjZSRHRKUVVGQk8wbEJaMHBCTEVOQlFVTTdTVUV2U1ZFc2VVTkJRV0VzUjBGQmNFSXNWVUZCY1VJc1IwRkJXU3hGUVVGRkxFZEJRV0U3VVVGRE9VTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhqUVVGakxFVkJRVVVzYTBKQlFXdENMRU5CUVVNc1EwRkJRenRSUVVOc1JDeEpRVUZKTEZWQlFWVXNSMEZCUnl4SlFVRkpMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZGtNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZETEVkQlFVY3NSVUZCUlN4UFFVRlBPMWxCUXpOQ0xFbEJRVWtzUjBGQlJ5eEZRVUZGTzJkQ1FVTlFMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhMUVVGQkxFVkJRVVVzUTBGQlF5eERRVUZETzJkQ1FVTTVRaXhQUVVGUE8yRkJRMUk3V1VGRFJDeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRM0JDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTB3c1EwRkJRenRKUVVOTkxITkRRVUZWTEVkQlFXcENMRlZCUVd0Q0xFZEJRVmtzUlVGQlJTeEhRVUZoTzFGQlF6TkRMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zWTBGQll5eEZRVUZGTEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03VVVGRGJFUXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFVkJRVVVzVlVGQlF5eEhRVUZITEVWQlFVVXNUMEZCVHp0WlFVTTFRaXhKUVVGSkxFZEJRVWNzUlVGQlJUdG5Ra0ZEVUN4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1MwRkJRU3hGUVVGRkxFTkJRVU1zUTBGQlF6dG5Ra0ZET1VJc1QwRkJUenRoUVVOU08ybENRVUZOTzJkQ1FVTk1MRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8yRkJReTlDTzFGQlEwZ3NRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRUQ3hEUVVGRE8wbEJRMDBzTUVOQlFXTXNSMEZCY2tJc1ZVRkJjMElzUjBGQldTeEZRVUZGTEVkQlFXRTdVVUZETDBNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eGpRVUZqTEVWQlFVVXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dFJRVU5zUkN4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRlZCUVVNc1IwRkJSeXhGUVVGRkxFOUJRVTg3V1VGRE0wTXNTVUZCU1N4SFFVRkhMRVZCUVVVN1owSkJRMUFzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEV0QlFVRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1owSkJRemxDTEU5QlFVODdZVUZEVWp0cFFrRkJUVHRuUWtGRFRDeEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0aFFVTXZRanRSUVVOSUxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEwd3NRMEZCUXp0SlFVVk5MREJEUVVGakxFZEJRWEpDTEZWQlFYTkNMRWRCUVZrc1JVRkJSU3hIUVVGaE8xRkJReTlETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1kwRkJZeXhGUVVGRkxHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1VVRkRiRVFzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNSVUZCUlN4RlFVRkZMRlZCUVVNc1IwRkJSeXhGUVVGRkxFOUJRVTg3V1VGREwwTXNTVUZCU1N4SFFVRkhMRVZCUVVVN1owSkJRMUFzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEV0QlFVRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1owSkJRemxDTEU5QlFVODdZVUZEVWp0cFFrRkJUVHRuUWtGRFRDeEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0aFFVTXZRanRSUVVOSUxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEwd3NRMEZCUXp0SlFVVk5MSGxEUVVGaExFZEJRWEJDTEZWQlFYRkNMRWRCUVZrc1JVRkJSU3hIUVVGaE8xRkJRemxETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1kwRkJZeXhGUVVGRkxHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1VVRkRiRVFzVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVOMFFpeEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeEZRVU4wUWl4SFFVRkhMRU5CUVVNc1NVRkJTU3hGUVVOU0xFVkJRVVVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVTmlMRlZCUVVNc1IwRkJSeXhGUVVGRkxFOUJRVTg3V1VGRFdDeEpRVUZKTEVkQlFVY3NSVUZCUlR0blFrRkRVQ3hIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzUzBGQlFTeEZRVUZGTEVOQlFVTXNRMEZCUXp0blFrRkRPVUlzVDBGQlR6dGhRVU5TTzFsQlEwUXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dFJRVU53UWl4RFFVRkRMRU5CUTBZc1EwRkJRenRKUVVOS0xFTkJRVU03U1VGRlRTeHZRMEZCVVN4SFFVRm1MRlZCUVdkQ0xFZEJRVmtzUlVGQlJTeEhRVUZoTzFGQlEzcERMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zWTBGQll5eEZRVUZGTEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03VVVGRGJFUXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkRXaXhGUVVGRkxHRkJRV0VzUlVGQlJTeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSU3hGUVVNNVFpeEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZMRzlDUVVGdlFpeEZRVUZGTEVsQlFVa3NSVUZCUlN4dFFrRkJiVUlzUlVGQlJTeExRVUZMTEVWQlFVVXNSVUZCUlN4RlFVTndSU3hWUVVGRExFZEJRVWNzUlVGQlJTeFBRVUZQTzFsQlExZ3NTVUZCU1N4SFFVRkhMRVZCUVVVN1owSkJRMUFzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEV0QlFVRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1owSkJRemxDTEU5QlFVODdZVUZEVWp0WlFVTkVMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEY0VJc1EwRkJReXhEUVVOR0xFTkJRVU03U1VGRFNpeERRVUZETzBsQlJVMHNiVU5CUVU4c1IwRkJaQ3hWUVVGbExFZEJRVmtzUlVGQlJTeEhRVUZoTzFGQlEzaERMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zWTBGQll5eEZRVUZGTEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03VVVGRGJFUXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkRXaXhGUVVGRkxHRkJRV0VzUlVGQlJTeEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSU3hGUVVNNVFpeEZRVUZGTEVsQlFVa3NSVUZCUlN4RlFVRkZMR2xDUVVGcFFpeEZRVUZGTEVsQlFVa3NSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4RlFVTXpSQ3hWUVVGRExFZEJRVWNzUlVGQlJTeFBRVUZQTzFsQlExZ3NTVUZCU1N4SFFVRkhMRVZCUVVVN1owSkJRMUFzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEV0QlFVRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1owSkJRemxDTEU5QlFVODdZVUZEVWp0WlFVTkVMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEY0VJc1EwRkJReXhEUVVOR0xFTkJRVU03U1VGRFNpeERRVUZETzBsQlJVMHNlVU5CUVdFc1IwRkJjRUlzVlVGQmNVSXNSMEZCV1N4RlFVRkZMRWRCUVdFN1VVRkRPVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4alFVRmpMRVZCUVVVc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0UlFVTnNSQ3hQUVVGUExFTkJRVU1zVFVGQlRTeERRVU5hTEVWQlFVVXNZVUZCWVN4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlF6bENMRVZCUVVVc1NVRkJTU3hGUVVGRkxFVkJRVVVzYlVKQlFXMUNMRVZCUVVVc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4RlFVTnVSQ3hWUVVGRExFZEJRVWNzUlVGQlJTeFBRVUZQTzFsQlExZ3NTVUZCU1N4SFFVRkhMRVZCUVVVN1owSkJRMUFzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeEhRVUZITEV0QlFVRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1owSkJRemxDTEU5QlFVODdZVUZEVWp0WlFVTkVMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEY0VJc1EwRkJReXhEUVVOR0xFTkJRVU03U1VGRFNpeERRVUZETzBsQlJVMHNNRU5CUVdNc1IwRkJja0lzVlVGQmMwSXNSMEZCV1N4RlFVRkZMRWRCUVdFN1VVRkRMME1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4alFVRmpMRVZCUVVVc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0UlFVTnNSQ3hQUVVGUExFTkJRVU1zVFVGQlRTeERRVU5hTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlEzQkNPMWxCUTBVc1MwRkJTeXhGUVVGRk8yZENRVU5NTEZkQlFWY3NSVUZCUlR0dlFrRkRXQ3hUUVVGVExFVkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBPMjlDUVVNeFFpeFBRVUZQTEVWQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTE8yOUNRVU4wUWl4WFFVRlhMRVZCUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTzI5Q1FVTTVRaXhoUVVGaExFVkJRVVVzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhPMjlDUVVOdVF5eE5RVUZOTEVWQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSk8yOUNRVU53UWl4TlFVRk5MRVZCUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTzJsQ1FVTnlRanRoUVVOR08xTkJRMFlzUlVGRFJDeFZRVUZETEVkQlFVY3NSVUZCUlN4UFFVRlBPMWxCUTFnc1NVRkJTU3hIUVVGSExFVkJRVVU3WjBKQlExQXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRXRCUVVFc1JVRkJSU3hEUVVGRExFTkJRVU03WjBKQlF6bENMRTlCUVU4N1lVRkRVanRaUVVORUxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkRjRUlzUTBGQlF5eERRVU5HTEVOQlFVTTdTVUZEU2l4RFFVRkRPMGxCUlUwc2VVTkJRV0VzUjBGQmNFSXNWVUZCY1VJc1IwRkJXU3hGUVVGRkxFZEJRV0U3VVVGRE9VTXNSMEZCUnl4RFFVRkRMRk5CUVZNc1EwRkJReXhqUVVGakxFVkJRVVVzYTBKQlFXdENMRU5CUVVNc1EwRkJRenRSUVVOc1JDeFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1ZVRkJRU3hIUVVGSE8xbEJRek5ETEVsQlFVa3NSMEZCUnl4RlFVRkZPMmRDUVVOUUxFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eExRVUZCTEVWQlFVVXNRMEZCUXl4RFFVRkRPMmRDUVVNNVFpeFBRVUZQTzJGQlExSTdXVUZEUkN4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzVDBGQlR5eEZRVUZGTEZOQlFWTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRia01zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEVEN4RFFVRkRPMGxCUTBnc2QwSkJRVU03UVVGQlJDeERRVUZETEVGQmFFcEVMRWxCWjBwREluMD0iLCJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IHsgQWNjb3VudENvbnRyb2xsZXIgfSBmcm9tIFwiLi4vbGlzdGluZy9saWIvY29udHJvbGxlcnMvY3JtQ29udHJvbGxlclwiO1xuaW1wb3J0IFwicmVmbGVjdC1tZXRhZGF0YVwiO1xudmFyIExpc3RpbmdNb25nb0NvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTGlzdGluZ01vbmdvQ29udHJvbGxlcigpIHtcbiAgICAgICAgdGhpcy5hY2NvdW50Q29udHJvbGxlciA9IG5ldyBBY2NvdW50Q29udHJvbGxlcigpO1xuICAgICAgICB0aGlzLnJvdXRlciA9IFJvdXRlcigpO1xuICAgICAgICB0aGlzLnJvdXRlcygpO1xuICAgIH1cbiAgICBMaXN0aW5nTW9uZ29Db250cm9sbGVyLnByb3RvdHlwZS5yb3V0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucm91dGVyLmdldChcIi9oZWFsdGh6XCIsIGZ1bmN0aW9uIChfLCByZXMpIHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHsgc3VjY2VzczogXCJva1wiIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yb3V0ZXIuZ2V0KFwiL2xpc3RBY2NvdW50XCIsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LCB0aGlzLmFjY291bnRDb250cm9sbGVyLmdldEFjY291bnQpO1xuICAgICAgICB0aGlzLnJvdXRlci5wb3N0KFwiL2xpc3RBY2NvdW50XCIsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LCB0aGlzLmFjY291bnRDb250cm9sbGVyLmFkZE5ld0FjY291bnQpO1xuICAgICAgICB0aGlzLnJvdXRlci5wb3N0KFwiL2FjdGl2YXRlXCIsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LCB0aGlzLmFjY291bnRDb250cm9sbGVyLmFjdGl2YXRlKTtcbiAgICAgICAgdGhpcy5yb3V0ZXIucG9zdChcIi9iaWxsXCIsIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9LCB0aGlzLmFjY291bnRDb250cm9sbGVyLnBheWJpbGwpO1xuICAgICAgICB0aGlzLnJvdXRlci5wb3N0KFwiL2JhbGFuY2VVcGRhdGVcIiwgZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0sIHRoaXMuYWNjb3VudENvbnRyb2xsZXIuYmFsYW5jZVVwZGF0ZSk7XG4gICAgICAgIHRoaXMucm91dGVyLnBvc3QoXCIvdHJhbnNhY3Rpb25cIiwgZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0sIHRoaXMuYWNjb3VudENvbnRyb2xsZXIuYWRkVHJhbnNhY3Rpb24pO1xuICAgICAgICB0aGlzLnJvdXRlci5nZXQoXCIvbGlzdEFjY291bnQvOklEXCIsIGZ1bmN0aW9uIChfLCByZXMsIG5leHQpIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSwgdGhpcy5hY2NvdW50Q29udHJvbGxlci5nZXRBY2NvdW50QnlJZCk7XG4gICAgICAgIHRoaXMucm91dGVyLmdldChcIi9saXN0QWNjb3VudElELzpJRFwiLCBmdW5jdGlvbiAoXywgcmVzLCBuZXh0KSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0sIHRoaXMuYWNjb3VudENvbnRyb2xsZXIuZ2V0QWNjb3VudEJ5SUQpO1xuICAgICAgICB0aGlzLnJvdXRlci5wdXQoXCIvbGlzdEFjY291bnQvOklEXCIsIGZ1bmN0aW9uIChfLCByZXMsIG5leHQpIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSwgdGhpcy5hY2NvdW50Q29udHJvbGxlci51cGRhdGVBY2NvdW50KTtcbiAgICAgICAgdGhpcy5yb3V0ZXIuZGVsZXRlKFwiL2xpc3RBY2NvdW50LzpJRFwiLCBmdW5jdGlvbiAoXywgcmVzLCBuZXh0KSB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0sIHRoaXMuYWNjb3VudENvbnRyb2xsZXIuZGVsZXRlQWNjb3VudCk7XG4gICAgfTtcbiAgICByZXR1cm4gTGlzdGluZ01vbmdvQ29udHJvbGxlcjtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBuZXcgTGlzdGluZ01vbmdvQ29udHJvbGxlcigpLnJvdXRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOHVMaTl6Y21NdlkyOXVkSEp2Ykd4bGNuTXZiR2x6ZEdsdVp5OXBibVJsZUM1MGN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRU3hQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNVMEZCVXl4RFFVRkRPMEZCUldwRExFOUJRVThzUlVGQlJTeHBRa0ZCYVVJc1JVRkJSU3hOUVVGTkxEQkRRVUV3UXl4RFFVRkRPMEZCUXpkRkxFOUJRVThzYTBKQlFXdENMRU5CUVVNN1FVRkRNVUk3U1VGSlJUdFJRVWhQTEhOQ1FVRnBRaXhIUVVGelFpeEpRVUZKTEdsQ1FVRnBRaXhGUVVGRkxFTkJRVU03VVVGSmNFVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFVkJRVVVzUTBGQlF6dFJRVU4yUWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU03U1VGRGFFSXNRMEZCUXp0SlFVVlBMSFZEUVVGTkxFZEJRV1E3VVVGRFJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFVkJRVVVzVlVGQlF5eERRVUZETEVWQlFVVXNSMEZCUnp0WlFVTnFReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRExFOUJRVThzUlVGQlF5eEpRVUZKTEVWQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNaRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlJVZ3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRMklzWTBGQll5eEZRVU5rTEZWQlFVTXNSMEZCV1N4RlFVRkZMRWRCUVdFc1JVRkJSU3hKUVVGclFqdFpRVU01UXl4SlFVRkpMRVZCUVVVc1EwRkJRenRSUVVOVUxFTkJRVU1zUlVGRFJDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVlVGQlZTeERRVU5zUXl4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlEyUXNZMEZCWXl4RlFVTmtMRlZCUVVNc1IwRkJXU3hGUVVGRkxFZEJRV0VzUlVGQlJTeEpRVUZyUWp0WlFVTTVReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU5VTEVOQlFVTXNSVUZEUkN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNZVUZCWVN4RFFVTnlReXhEUVVGRE8xRkJSMFlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUTJRc1YwRkJWeXhGUVVOWUxGVkJRVU1zUjBGQldTeEZRVUZGTEVkQlFXRXNSVUZCUlN4SlFVRnJRanRaUVVNNVF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTlVMRU5CUVVNc1JVRkRSQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hEUVVOb1F5eERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRMlFzVDBGQlR5eEZRVU5RTEZWQlFVTXNSMEZCV1N4RlFVRkZMRWRCUVdFc1JVRkJSU3hKUVVGclFqdFpRVU01UXl4SlFVRkpMRVZCUVVVc1EwRkJRenRSUVVOVUxFTkJRVU1zUlVGRFJDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVDBGQlR5eERRVU12UWl4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlEyUXNaMEpCUVdkQ0xFVkJRMmhDTEZWQlFVTXNSMEZCV1N4RlFVRkZMRWRCUVdFc1JVRkJSU3hKUVVGclFqdFpRVU01UXl4SlFVRkpMRVZCUVVVc1EwRkJRenRSUVVOVUxFTkJRVU1zUlVGRFJDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zWVVGQllTeERRVU55UXl4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlEyUXNZMEZCWXl4RlFVTmtMRlZCUVVNc1IwRkJXU3hGUVVGRkxFZEJRV0VzUlVGQlJTeEpRVUZyUWp0WlFVTTVReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU5VTEVOQlFVTXNSVUZEUkN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNZMEZCWXl4RFFVTjBReXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUTJJc2EwSkJRV3RDTEVWQlEyeENMRlZCUVVNc1EwRkJReXhGUVVGRkxFZEJRV0VzUlVGQlJTeEpRVUZyUWp0WlFVTnVReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU5VTEVOQlFVTXNSVUZEUkN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNZMEZCWXl4RFFVTjBReXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUTJJc2IwSkJRVzlDTEVWQlEzQkNMRlZCUVVNc1EwRkJReXhGUVVGRkxFZEJRV0VzUlVGQlJTeEpRVUZyUWp0WlFVTnVReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU5VTEVOQlFVTXNSVUZEUkN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNZMEZCWXl4RFFVTjBReXhEUVVGRE8xRkJSMFlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUTJJc2EwSkJRV3RDTEVWQlEyeENMRlZCUVVNc1EwRkJReXhGUVVGRkxFZEJRV0VzUlVGQlJTeEpRVUZyUWp0WlFVTnVReXhKUVVGSkxFVkJRVVVzUTBGQlF6dFJRVU5VTEVOQlFVTXNSVUZEUkN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNZVUZCWVN4RFFVTnlReXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUTJoQ0xHdENRVUZyUWl4RlFVTnNRaXhWUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZoTEVWQlFVVXNTVUZCYTBJN1dVRkRia01zU1VGQlNTeEZRVUZGTEVOQlFVTTdVVUZEVkN4RFFVRkRMRVZCUTBRc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR0ZCUVdFc1EwRkRja01zUTBGQlF6dEpRVU5LTEVOQlFVTTdTVUZEU0N3MlFrRkJRenRCUVVGRUxFTkJRVU1zUVVGb1IwUXNTVUZuUjBNN1FVRkZSQ3hsUVVGbExFbEJRVWtzYzBKQlFYTkNMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU1pZlE9PSIsImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0IHNlc3Npb24gZnJvbSAnZXhwcmVzcy1zZXNzaW9uJztcbmltcG9ydCBMaXN0aW5nTW9uZ29Db250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcnMvbGlzdGluZy9pbmRleCc7XG52YXIgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xubW9uZ29vc2UuUHJvbWlzZSA9IFByb21pc2U7XG52YXIgQXBwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwcCgpIHtcbiAgICAgICAgLy8gcHVibGljIG1vbmdvVXJsOiBzdHJpbmcgPSAnbW9uZ29kYjovLycrcHJvY2Vzcy5lbnYuTU9OR09VU0VSTkFNRSsnOicrcHJvY2Vzcy5lbnYuTU9OR09QQVNTV09SRCsnQCcrcHJvY2Vzcy5lbnYuSE9TVE5BTUVNT05HT0RCKyc6Jytwcm9jZXNzLmVudi5NT05HT1BPUlQrJy9hZG1pbic7XG4gICAgICAgIHRoaXMubW9uZ29VcmwgPSAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNycgKyAnL2FkbWluJztcbiAgICAgICAgdGhpcy5leHByZXNzID0gZXhwcmVzcygpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmUoKTtcbiAgICAgICAgdGhpcy5yb3V0ZXMoKTtcbiAgICAgICAgdGhpcy5tb25nb1NldHVwKCk7XG4gICAgfVxuICAgIEFwcC5wcm90b3R5cGUubW9uZ29TZXR1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbW9uZ29vc2UuUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuICAgICAgICBtb25nb29zZS5jb25uZWN0KHRoaXMubW9uZ29VcmwpO1xuICAgIH07XG4gICAgQXBwLnByb3RvdHlwZS5taWRkbGV3YXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmV4cHJlc3MudXNlKGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgICAgICAgICAgcmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiLCBcIipcIik7XG4gICAgICAgICAgICByZXMuaGVhZGVyKFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiLCBcIlgtUmVxdWVzdGVkLVdpdGgsY29udGVudC10eXBlXCIpO1xuICAgICAgICAgICAgcmVzLmhlYWRlcihcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIiwgXCJHRVQsIFBPU1QsIE9QVElPTlMsIFBVVCwgUEFUQ0gsIERFTEVURVwiKTtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZXhwcmVzcy51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuICAgICAgICB0aGlzLmV4cHJlc3MudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XG4gICAgICAgIHRoaXMuZXhwcmVzcy51c2Uoc2Vzc2lvbih7IHNlY3JldDogJ3Rlc3QxMjMnLCBzYXZlVW5pbml0aWFsaXplZDogZmFsc2UsIHJlc2F2ZTogdHJ1ZSB9KSk7XG4gICAgfTtcbiAgICBBcHAucHJvdG90eXBlLnJvdXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5leHByZXNzLmdldCgnLycsIGZ1bmN0aW9uIChfLCByZXMpIHtcbiAgICAgICAgICAgIHJlcy5zZW5kKCdoaScpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5leHByZXNzLnVzZSgnLycsIExpc3RpbmdNb25nb0NvbnRyb2xsZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIEFwcDtcbn0oKSk7XG5leHBvcnQgZGVmYXVsdCBuZXcgQXBwKCkuZXhwcmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMyVnlkbVZ5TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2TGk0dmMzSmpMM05sY25abGNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4UFFVRlBMRTlCUVU4c1RVRkJUU3hUUVVGVExFTkJRVU03UVVGRE9VSXNUMEZCVHl4VlFVRlZMRTFCUVUwc1lVRkJZU3hEUVVGRE8wRkJRM0pETEU5QlFVOHNUMEZCVHl4TlFVRk5MR2xDUVVGcFFpeERRVUZETzBGQlEzUkRMRTlCUVU4c2MwSkJRWE5DTEUxQlFVMHNOa0pCUVRaQ0xFTkJRVU03UVVGRGFrVXNTVUZCU1N4UlFVRlJMRWRCUVVjc1QwRkJUeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEyNURMRkZCUVZFc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETzBGQlF6TkNPMGxCUzBVN1VVRklRU3h4UzBGQmNVczdVVUZET1Vvc1lVRkJVU3hIUVVGWExESkNRVUV5UWl4SFFVRkRMRkZCUVZFc1EwRkJRenRSUVVjM1JDeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1JVRkJSU3hEUVVGRE8xRkJRM3BDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRSUVVOc1FpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNN1VVRkRaQ3hKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTTdTVUZEY0VJc1EwRkJRenRKUVVOUExIZENRVUZWTEVkQlFXeENPMUZCUTBVc1VVRkJVU3hEUVVGRExFOUJRVThzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRPMUZCUTJ4RExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wbEJRM0JETEVOQlFVTTdTVUZEVXl4M1FrRkJWU3hIUVVGc1FqdFJRVU5GTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVk1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpPMWxCUTNSRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNOa0pCUVRaQ0xFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdXVUZETDBNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5dzRRa0ZCT0VJc1JVRkJSU3dyUWtGQkswSXNRMEZCUXl4RFFVRkRPMWxCUXpWRkxFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNPRUpCUVRoQ0xFVkJRVVVzZDBOQlFYZERMRU5CUVVNc1EwRkJRenRaUVVOeVJpeEpRVUZKTEVWQlFVVXNRMEZCUXp0UlFVTlVMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMGdzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEY0VNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRkxGRkJRVkVzUlVGQlJTeExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkROMFFzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVU1zVFVGQlRTeEZRVUZGTEZOQlFWTXNSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWxCUVVrc1JVRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU40Uml4RFFVRkRPMGxCUTA4c2IwSkJRVTBzUjBGQlpEdFJRVU5GTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeFZRVUZUTEVOQlFVTXNSVUZCUlN4SFFVRkhPMWxCUTI1RExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRha0lzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlF6dEpRVU5vUkN4RFFVRkRPMGxCUTBnc1ZVRkJRenRCUVVGRUxFTkJRVU1zUVVGb1EwUXNTVUZuUTBNN1FVRkRSQ3hsUVVGbExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRJbjA9IiwiaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IEFwcCBmcm9tICcuL3NlcnZlcic7XG5kZWJ1ZygndHMtZXhwcmVzczpzZXJ2ZXInKTtcbnZhciBJbml0U2VydmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEluaXRTZXJ2ZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMubm9ybWFsaXplUG9ydCA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHZhciBwb3J0ID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyBwYXJzZUludCh2YWwsIDEwKSA6IHZhbDtcbiAgICAgICAgICAgIGlmIChpc05hTihwb3J0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgICAgICAgZWxzZSBpZiAocG9ydCA+PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBwb3J0O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3Iuc3lzY2FsbCAhPT0gJ2xpc3RlbicpXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB2YXIgYmluZCA9IHR5cGVvZiBfdGhpcy5wb3J0ID09PSAnc3RyaW5nJyA/ICdQaXBlICcgKyBfdGhpcy5wb3J0IDogJ1BvcnQgJyArIF90aGlzLnBvcnQ7XG4gICAgICAgICAgICBzd2l0Y2ggKGVycm9yLmNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdFQUNDRVMnOlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGJpbmQgKyBcIiByZXF1aXJlcyBlbGV2YXRlZCBwcml2aWxlZ2VzXCIpO1xuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0VBRERSSU5VU0UnOlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGJpbmQgKyBcIiBpcyBhbHJlYWR5IGluIHVzZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5vbkxpc3RlbmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibGlzdGVuaW5nIG9uIFwiICsgX3RoaXMucG9ydCk7XG4gICAgICAgICAgICB2YXIgYWRkciA9IF90aGlzLnNlcnZlci5hZGRyZXNzKCk7XG4gICAgICAgICAgICB2YXIgYmluZCA9IHR5cGVvZiBhZGRyID09PSAnc3RyaW5nJyA/IFwicGlwZSBcIiArIGFkZHIgOiBcInBvcnQgXCIgKyBhZGRyLnBvcnQ7XG4gICAgICAgICAgICBkZWJ1ZyhcIkxpc3RlbmluZyBvbiBcIiArIGJpbmQpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLnBvcnQgPSB0aGlzLm5vcm1hbGl6ZVBvcnQoODA4Mik7XG4gICAgICAgIEFwcC5zZXQoJ3BvcnQnLCB0aGlzLnBvcnQpO1xuICAgICAgICB0aGlzLnNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKEFwcCk7XG4gICAgICAgIHRoaXMuc2VydmVyLmxpc3Rlbih0aGlzLnBvcnQpO1xuICAgICAgICB0aGlzLnNlcnZlci5vbignZXJyb3InLCB0aGlzLm9uRXJyb3IpO1xuICAgICAgICB0aGlzLnNlcnZlci5vbignbGlzdGVuaW5nJywgdGhpcy5vbkxpc3RlbmluZyk7XG4gICAgfVxuICAgIHJldHVybiBJbml0U2VydmVyO1xufSgpKTtcbm5ldyBJbml0U2VydmVyKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1QwRkJUeXhKUVVGSkxFMUJRVTBzVFVGQlRTeERRVUZETzBGQlEzaENMRTlCUVU4c1MwRkJTeXhOUVVGTkxFOUJRVThzUTBGQlF6dEJRVVV4UWl4UFFVRlBMRWRCUVVjc1RVRkJUU3hWUVVGVkxFTkJRVU03UVVGRk0wSXNTMEZCU3l4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdRVUZGTTBJN1NVRkpSVHRSUVVGQkxHbENRVTlETzFGQlJVOHNhMEpCUVdFc1IwRkJSeXhWUVVGRExFZEJRVzlDTzFsQlF6TkRMRWxCUVVrc1NVRkJTU3hIUVVGWExFOUJRVThzUjBGQlJ5eExRVUZMTEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRE8xbEJRM0pGTEVsQlFVa3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJRenRuUWtGQlJTeFBRVUZQTEVkQlFVY3NRMEZCUXp0cFFrRkRka0lzU1VGQlNTeEpRVUZKTEVsQlFVa3NRMEZCUXp0blFrRkJSU3hQUVVGUExFbEJRVWtzUTBGQlF6czdaMEpCUXpOQ0xFOUJRVThzUzBGQlN5eERRVUZETzFGQlEzQkNMRU5CUVVNc1EwRkJRenRSUVVWTkxGbEJRVThzUjBGQlJ5eFZRVUZETEV0QlFUUkNPMWxCUXpkRExFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNTMEZCU3l4UlFVRlJPMmRDUVVGRkxFMUJRVTBzUzBGQlN5eERRVUZETzFsQlF6VkRMRWxCUVVrc1NVRkJTU3hIUVVOT0xFOUJRVThzUzBGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUjBGQlJ5eExRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFZEJRVWNzUzBGQlNTeERRVUZETEVsQlFVa3NRMEZCUXp0WlFVTTFSU3hSUVVGUkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVTdaMEpCUTJ4Q0xFdEJRVXNzVVVGQlVUdHZRa0ZEV0N4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGSkxFbEJRVWtzYTBOQlFTdENMRU5CUVVNc1EwRkJRenR2UWtGRGRFUXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dHZRa0ZEYUVJc1RVRkJUVHRuUWtGRFVpeExRVUZMTEZsQlFWazdiMEpCUTJZc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlNTeEpRVUZKTEhWQ1FVRnZRaXhEUVVGRExFTkJRVU03YjBKQlF6TkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdiMEpCUTJoQ0xFMUJRVTA3WjBKQlExSTdiMEpCUTBVc1RVRkJUU3hMUVVGTExFTkJRVU03WVVGRFpqdFJRVU5JTEVOQlFVTXNRMEZCUXp0UlFVVk5MR2RDUVVGWExFZEJRVWM3V1VGRGNFSXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhyUWtGQlowSXNTMEZCU1N4RFFVRkRMRWxCUVUwc1EwRkJReXhEUVVGRE8xbEJRM3BETEVsQlFVa3NTVUZCU1N4SFFVRkhMRXRCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdXVUZEYWtNc1NVRkJTU3hKUVVGSkxFZEJRVWNzVDBGQlR5eEpRVUZKTEV0QlFVc3NVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhWUVVGUkxFbEJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNWVUZCVVN4SlFVRkpMRU5CUVVNc1NVRkJUU3hEUVVGRE8xbEJRek5GTEV0QlFVc3NRMEZCUXl4clFrRkJaMElzU1VGQlRTeERRVUZETEVOQlFVTTdVVUZEYUVNc1EwRkJReXhEUVVGRE8xRkJkRU5CTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTnlReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRE0wSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTNKRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVU01UWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRM1JETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hEUVVGRExGZEJRVmNzUlVGQlJTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1NVRkRhRVFzUTBGQlF6dEpRV2xEU0N4cFFrRkJRenRCUVVGRUxFTkJRVU1zUVVFMVEwUXNTVUUwUTBNN1FVRkZSQ3hKUVVGSkxGVkJRVlVzUlVGQlJTeERRVUZESW4wPSJdLCJzb3VyY2VSb290IjoiIn0=