!function(e){function t(e){var t=require("./"+e+"."+r+".hot-update.js");!function(e,t){if(!j[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--g&&0===v&&P()}(t.id,t.modules)}var n,o=!0,r="f46ea05d94557e17a569",i={},c=[],s=[];function a(e){var t=x[e];if(!t)return I;var o=function(o){return t.hot.active?(x[o]?-1===x[o].parents.indexOf(e)&&x[o].parents.push(e):(c=[e],n=o),-1===t.children.indexOf(o)&&t.children.push(o)):(console.warn("[HMR] unexpected require("+o+") from disposed module "+e),c=[]),I(o)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return I[e]},set:function(t){I[e]=t}}};for(var i in I)Object.prototype.hasOwnProperty.call(I,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(o,i,r(i));return o.e=function(e){return"ready"===p&&l("prepare"),v++,I.e(e).then(t,(function(e){throw t(),e}));function t(){v--,"prepare"===p&&(m[e]||D(e),0===v&&0===g&&P())}},o.t=function(e,t){return 1&t&&(e=o(e)),I.t(e,-2&t)},o}function u(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var o=0;o<e.length;o++)t._acceptedDependencies[e[o]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:O,apply:w,status:function(e){if(!e)return p;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:i[e]};return n=void 0,t}var d=[],p="idle";function l(e){p=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var f,h,y,g=0,v=0,m={},b={},j={};function A(e){return+e+""===e?+e:e}function O(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return o=e,l("check"),function(){try{var e=require("./"+r+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then((function(e){if(!e)return l("idle"),null;b={},m={},j=e.c,y=e.h,l("prepare");var t=new Promise((function(e,t){f={resolve:e,reject:t}}));h={};return D(0),"prepare"===p&&0===v&&0===g&&P(),t}))}function D(e){j[e]?(b[e]=!0,g++,t(e)):m[e]=!0}function P(){l("ready");var e=f;if(f=null,e)if(o)Promise.resolve().then((function(){return w(o)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(A(n));e.resolve(t)}}function w(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,o,s,a,u;function d(e){for(var t=[e],n={},o=t.map((function(e){return{chain:[e],id:e}}));o.length>0;){var r=o.pop(),i=r.id,c=r.chain;if((a=x[i])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(a.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var s=0;s<a.parents.length;s++){var u=a.parents[s],d=x[u];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(d.hot._acceptedDependencies[i]?(n[u]||(n[u]=[]),f(n[u],[i])):(delete n[u],t.push(u),o.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var o=t[n];-1===e.indexOf(o)&&e.push(o)}}t=t||{};var g={},v=[],m={},b=function(){console.warn("[HMR] unexpected require("+D.moduleId+") to disposed module")};for(var O in h)if(Object.prototype.hasOwnProperty.call(h,O)){var D;u=A(O);var P=!1,w=!1,C=!1,T="";switch((D=h[O]?d(u):{type:"disposed",moduleId:O}).chain&&(T="\nUpdate propagation: "+D.chain.join(" -> ")),D.type){case"self-declined":t.onDeclined&&t.onDeclined(D),t.ignoreDeclined||(P=new Error("Aborted because of self decline: "+D.moduleId+T));break;case"declined":t.onDeclined&&t.onDeclined(D),t.ignoreDeclined||(P=new Error("Aborted because of declined dependency: "+D.moduleId+" in "+D.parentId+T));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(D),t.ignoreUnaccepted||(P=new Error("Aborted because "+u+" is not accepted"+T));break;case"accepted":t.onAccepted&&t.onAccepted(D),w=!0;break;case"disposed":t.onDisposed&&t.onDisposed(D),C=!0;break;default:throw new Error("Unexception type "+D.type)}if(P)return l("abort"),Promise.reject(P);if(w)for(u in m[u]=h[u],f(v,D.outdatedModules),D.outdatedDependencies)Object.prototype.hasOwnProperty.call(D.outdatedDependencies,u)&&(g[u]||(g[u]=[]),f(g[u],D.outdatedDependencies[u]));C&&(f(v,[D.moduleId]),m[u]=b)}var _,S=[];for(o=0;o<v.length;o++)u=v[o],x[u]&&x[u].hot._selfAccepted&&m[u]!==b&&S.push({module:u,errorHandler:x[u].hot._selfAccepted});l("dispose"),Object.keys(j).forEach((function(e){!1===j[e]&&function(e){delete installedChunks[e]}(e)}));for(var E,H,N=v.slice();N.length>0;)if(u=N.pop(),a=x[u]){var q={},U=a.hot._disposeHandlers;for(s=0;s<U.length;s++)(n=U[s])(q);for(i[u]=q,a.hot.active=!1,delete x[u],delete g[u],s=0;s<a.children.length;s++){var B=x[a.children[s]];B&&((_=B.parents.indexOf(u))>=0&&B.parents.splice(_,1))}}for(u in g)if(Object.prototype.hasOwnProperty.call(g,u)&&(a=x[u]))for(H=g[u],s=0;s<H.length;s++)E=H[s],(_=a.children.indexOf(E))>=0&&a.children.splice(_,1);for(u in l("apply"),r=y,m)Object.prototype.hasOwnProperty.call(m,u)&&(e[u]=m[u]);var M=null;for(u in g)if(Object.prototype.hasOwnProperty.call(g,u)&&(a=x[u])){H=g[u];var k=[];for(o=0;o<H.length;o++)if(E=H[o],n=a.hot._acceptedDependencies[E]){if(-1!==k.indexOf(n))continue;k.push(n)}for(o=0;o<k.length;o++){n=k[o];try{n(H)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:H[o],error:e}),t.ignoreErrored||M||(M=e)}}}for(o=0;o<S.length;o++){var z=S[o];u=z.module,c=[u];try{I(u)}catch(e){if("function"==typeof z.errorHandler)try{z.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||M||(M=n),M||(M=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||M||(M=e)}}return M?(l("fail"),Promise.reject(M)):(l("idle"),new Promise((function(e){e(v)})))}var x={};function I(t){if(x[t])return x[t].exports;var n=x[t]={i:t,l:!1,exports:{},hot:u(t),parents:(s=c,c=[],s),children:[]};return e[t].call(n.exports,n,n.exports,a(t)),n.l=!0,n.exports}I.m=e,I.c=x,I.d=function(e,t,n){I.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},I.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},I.t=function(e,t){if(1&t&&(e=I(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(I.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)I.d(n,o,function(t){return e[t]}.bind(null,o));return n},I.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(t,"a",t),t},I.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},I.p="/Users/saifurrehman/Desktop/POCs/cumulus-bank/Accounts-Microservice/dist",I.h=function(){return r},a(9)(I.s=9)}([function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("debug")},function(e,t,n){"use strict";(function(e){var o=n(1),r=n.n(o),i=n(4),c=n.n(i),s=n(7),a=n.n(s),u=n(8),d=n(0);n(13),n(5);d.Promise=Promise;var p=function(){function t(){this.mongoUrl="mongodb://"+process.env.MONGOUSERNAME+":"+process.env.MONGOPASSWORD+"@"+process.env.HOSTNAMEMONGODB+":"+process.env.MONGOPORT+"/admin",this.express=r()(),this.middleware(),this.routes(),this.mongoSetup()}return t.prototype.mongoSetup=function(){d.Promise=global.Promise,d.connect(this.mongoUrl)},t.prototype.middleware=function(){this.express.use((function(e,t,n){t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Headers","X-Requested-With,content-type"),t.header("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, PATCH, DELETE"),n()})),this.express.use(c.a.json()),this.express.use(c.a.urlencoded({extended:!1})),this.express.use(a()({secret:"test123",saveUninitialized:!1,resave:!0})),this.express.use(r.a.static(e+"/public"))},t.prototype.routes=function(){this.express.get("/",(function(e,t){t.send("hi")})),this.express.use("/",u.a)},t}();t.a=(new p).express}).call(this,"/")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("request")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("express-session")},function(e,t,n){"use strict";var o=n(1),r=n(0),i=r.Schema,c=new i({Product:String,Price:Number,Type:String,Payed:Boolean}),s=new i({Product:String,Price:Number,AccountID:String,AccountName:String,Type:String,Date:String}),a=new i({Activate:Boolean,Balance:Number,CuurentSpending:Number,AccountName:String}),u=new i({Balance:Number,CuurentSpending:Number,AccountName:String}),d=new i({ID:Number,Account:[a],CurrentAccount:[u],Transaction:[s],Billing:[c]}),p=n(5),l=r.model("Account",d),f=function(){function e(){}return e.prototype.customerfeed=function(e,t){t.setHeader("Content-Type","application/json"),p({method:"POST",rejectUnauthorized:!1,requestCert:!0,agent:!1,uri:"https://caplonsgprd-1.securegateway.appdomain.cloud:15671/topics/CustomerFeed/records",headers:{"Content-Type":"text/plain",Authorization:"Bearer N2Pmtf3vpao6VR30rty7UqUXIZD-R-4_9FZwEteMQHvI",Accept:"application/json"},body:JSON.stringify(e.body)},(function(e,n,o){e&&t.status(400).send(e),t.status(200).json({success:"true"})}))},e.prototype.ledgerfeed=function(e,t){t.setHeader("Content-Type","application/json"),p({method:"POST",rejectUnauthorized:!1,requestCert:!0,agent:!1,uri:"https://caplonsgprd-1.securegateway.appdomain.cloud:15671/topics/LedgerFeed/records",headers:{"Content-Type":"text/plain",Authorization:"Bearer fUWdxy61kqTJzvPl1WMm4TBU41cqCIQSIJjZEjVO8o2y",Accept:"application/json"},body:JSON.stringify(e.body)},(function(e,n,o){e&&t.status(400).send(e),t.status(200).json({success:"true"})}))},e.prototype.utilitybill=function(e,t){t.setHeader("Content-Type","application/json"),p({method:"POST",rejectUnauthorized:!1,requestCert:!0,agent:!1,uri:"https://caplonsgprd-1.securegateway.appdomain.cloud:15671/topics/UtilityBillPayment/records",headers:{"Content-Type":"text/plain",Authorization:"Bearer deexllLV3LqYdNBz05d7Xd6d4Iy9jPAIZAMXYOzRNDJO",Accept:"application/json"},body:JSON.stringify(e.body)},(function(e,n,o){e&&t.status(400).send(e),t.status(200).json({success:"true"})}))},e.prototype.addNewAccount=function(e,t){t.setHeader("Content-Type","application/json"),new l(e.body).save((function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.getAccount=function(e,t){t.setHeader("Content-Type","application/json"),l.find({},(function(e,n){e?t.status(404).json({err:e}):t.status(200).send(n)}))},e.prototype.getAccountById=function(e,t){t.setHeader("Content-Type","application/json"),l.findById(e.params.ID,(function(e,n){e?t.status(404).json({err:e}):t.status(200).send(n)}))},e.prototype.getAccountByID=function(e,t){t.setHeader("Content-Type","application/json"),l.find({ID:e.params.ID},(function(e,n){e?t.status(404).json({err:e}):t.status(200).send(n)}))},e.prototype.updateAccount=function(e,t){t.setHeader("Content-Type","application/json"),l.findOneAndUpdate({_id:e.params.ID},e.body,{new:!0},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.activate=function(e,t){t.setHeader("Content-Type","application/json"),l.update({"Account._id":e.body.ID},{$set:{"Account.$.Activate":!0,"Account.$.Balance":1e4}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.paybill=function(e,t){t.setHeader("Content-Type","application/json"),l.update({"Billing._id":e.body.ID},{$set:{"Billing.$.Payed":!0,"Billing.$.Price":0}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.balanceUpdate=function(e,t){t.setHeader("Content-Type","application/json"),l.update({"Account._id":e.body.ID},{$set:{"Account.$.Balance":e.body.balance}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.addTransaction=function(e,t){t.setHeader("Content-Type","application/json"),l.update({_id:e.body.ID},{$push:{Transaction:{Product:e.body.Product,Price:e.body.Price,AccountID:e.body.AccountID,AccountName:e.body.AccountName,Type:e.body.Type,Date:e.body.Date}}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.deleteAccount=function(e,t){t.setHeader("Content-Type","application/json"),l.deleteOne({_id:e.params.ID},(function(e){e?t.status(404).json({err:e}):t.json({message:"success"})}))},e}(),h=(n(12),function(){function e(){this.accountController=new f,this.router=Object(o.Router)(),this.routes()}return e.prototype.routes=function(){this.router.get("/healthz",(function(e,t){t.status(200).send({success:"ok"})})),this.router.get("/listAccount",(function(e,t,n){n()}),this.accountController.getAccount),this.router.post("/listAccount",(function(e,t,n){n()}),this.accountController.addNewAccount),this.router.post("/activate",(function(e,t,n){n()}),this.accountController.activate),this.router.post("/bill",(function(e,t,n){n()}),this.accountController.paybill),this.router.post("/balanceUpdate",(function(e,t,n){n()}),this.accountController.balanceUpdate),this.router.post("/transaction",(function(e,t,n){n()}),this.accountController.addTransaction),this.router.get("/listAccount/:ID",(function(e,t,n){n()}),this.accountController.getAccountById),this.router.get("/listAccountID/:ID",(function(e,t,n){n()}),this.accountController.getAccountByID),this.router.put("/listAccount/:ID",(function(e,t,n){n()}),this.accountController.updateAccount),this.router.delete("/listAccount/:ID",(function(e,t,n){n()}),this.accountController.deleteAccount),this.router.post("/customerfeed",(function(e,t,n){n()}),this.accountController.customerfeed),this.router.post("/ledgerfeed",(function(e,t,n){n()}),this.accountController.ledgerfeed),this.router.post("/utilitybill",(function(e,t,n){n()}),this.accountController.utilitybill)},e}());t.a=(new h).router},function(e,t,n){n(10),e.exports=n(11)},function(e,t){e.exports=require("@babel/polyfill")},function(e,t,n){"use strict";n.r(t);var o=n(6),r=n.n(o),i=n(2),c=n.n(i),s=n(3);c()("ts-express:server"),new function(){var e=this;this.normalizePort=function(e){var t="string"==typeof e?parseInt(e,10):e;return isNaN(t)?e:t>=0&&t},this.onError=function(t){if("listen"!==t.syscall)throw t;var n="string"==typeof e.port?"Pipe "+e.port:"Port "+e.port;switch(t.code){case"EACCES":console.error(n+" requires elevated privileges"),process.exit(1);break;case"EADDRINUSE":console.error(n+" is already in use"),process.exit(1);break;default:throw t}},this.onListening=function(){console.log("listening on "+e.port);var t=e.server.address(),n="string"==typeof t?"pipe "+t:"port "+t.port;c()("Listening on "+n)},this.port=this.normalizePort(7e3),s.a.set("port",this.port),this.server=r.a.createServer(s.a),this.server.listen(this.port),this.server.on("error",this.onError),this.server.on("listening",this.onListening)}},function(e,t){e.exports=require("reflect-metadata")},function(e,t){e.exports=require("fs")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,