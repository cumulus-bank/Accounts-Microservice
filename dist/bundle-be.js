!function(e){function t(e){var t=require("./"+e+"."+o+".hot-update.js");!function(e,t){if(!A[e]||!m[e])return;for(var n in m[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===b&&w()}(t.id,t.modules)}var n,r=!0,o="684eca71f1de9dedc861",i={},c=[],s=[];function a(e){var t=x[e];if(!t)return I;var r=function(r){return t.hot.active?(x[r]?-1===x[r].parents.indexOf(e)&&x[r].parents.push(e):(c=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),c=[]),I(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return I[e]},set:function(t){I[e]=t}}};for(var i in I)Object.prototype.hasOwnProperty.call(I,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===p&&l("prepare"),b++,I.e(e).then(t,(function(e){throw t(),e}));function t(){b--,"prepare"===p&&(g[e]||j(e),0===b&&0===v&&w())}},r.t=function(e,t){return 1&t&&(e=r(e)),I.t(e,-2&t)},r}function u(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:O,apply:P,status:function(e){if(!e)return p;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var t=d.indexOf(e);t>=0&&d.splice(t,1)},data:i[e]};return n=void 0,t}var d=[],p="idle";function l(e){p=e;for(var t=0;t<d.length;t++)d[t].call(null,e)}var f,h,y,v=0,b=0,g={},m={},A={};function D(e){return+e+""===e?+e:e}function O(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return r=e,l("check"),function(){try{var e=require("./"+o+".hot-update.json")}catch(e){return Promise.resolve()}return Promise.resolve(e)}().then((function(e){if(!e)return l("idle"),null;m={},g={},A=e.c,y=e.h,l("prepare");var t=new Promise((function(e,t){f={resolve:e,reject:t}}));h={};return j(0),"prepare"===p&&0===b&&0===v&&w(),t}))}function j(e){A[e]?(m[e]=!0,v++,t(e)):g[e]=!0}function w(){l("ready");var e=f;if(f=null,e)if(r)Promise.resolve().then((function(){return P(r)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(D(n));e.resolve(t)}}function P(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,r,s,a,u;function d(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,c=o.chain;if((a=x[i])&&!a.hot._selfAccepted){if(a.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(a.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var s=0;s<a.parents.length;s++){var u=a.parents[s],d=x[u];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(d.hot._acceptedDependencies[i]?(n[u]||(n[u]=[]),f(n[u],[i])):(delete n[u],t.push(u),r.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var v={},b=[],g={},m=function(){console.warn("[HMR] unexpected require("+j.moduleId+") to disposed module")};for(var O in h)if(Object.prototype.hasOwnProperty.call(h,O)){var j;u=D(O);var w=!1,P=!1,_=!1,S="";switch((j=h[O]?d(u):{type:"disposed",moduleId:O}).chain&&(S="\nUpdate propagation: "+j.chain.join(" -> ")),j.type){case"self-declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||(w=new Error("Aborted because of self decline: "+j.moduleId+S));break;case"declined":t.onDeclined&&t.onDeclined(j),t.ignoreDeclined||(w=new Error("Aborted because of declined dependency: "+j.moduleId+" in "+j.parentId+S));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(j),t.ignoreUnaccepted||(w=new Error("Aborted because "+u+" is not accepted"+S));break;case"accepted":t.onAccepted&&t.onAccepted(j),P=!0;break;case"disposed":t.onDisposed&&t.onDisposed(j),_=!0;break;default:throw new Error("Unexception type "+j.type)}if(w)return l("abort"),Promise.reject(w);if(P)for(u in g[u]=h[u],f(b,j.outdatedModules),j.outdatedDependencies)Object.prototype.hasOwnProperty.call(j.outdatedDependencies,u)&&(v[u]||(v[u]=[]),f(v[u],j.outdatedDependencies[u]));_&&(f(b,[j.moduleId]),g[u]=m)}var C,E=[];for(r=0;r<b.length;r++)u=b[r],x[u]&&x[u].hot._selfAccepted&&g[u]!==m&&E.push({module:u,errorHandler:x[u].hot._selfAccepted});l("dispose"),Object.keys(A).forEach((function(e){!1===A[e]&&function(e){delete installedChunks[e]}(e)}));for(var T,H,N=b.slice();N.length>0;)if(u=N.pop(),a=x[u]){var q={},B=a.hot._disposeHandlers;for(s=0;s<B.length;s++)(n=B[s])(q);for(i[u]=q,a.hot.active=!1,delete x[u],delete v[u],s=0;s<a.children.length;s++){var U=x[a.children[s]];U&&((C=U.parents.indexOf(u))>=0&&U.parents.splice(C,1))}}for(u in v)if(Object.prototype.hasOwnProperty.call(v,u)&&(a=x[u]))for(H=v[u],s=0;s<H.length;s++)T=H[s],(C=a.children.indexOf(T))>=0&&a.children.splice(C,1);for(u in l("apply"),o=y,g)Object.prototype.hasOwnProperty.call(g,u)&&(e[u]=g[u]);var k=null;for(u in v)if(Object.prototype.hasOwnProperty.call(v,u)&&(a=x[u])){H=v[u];var M=[];for(r=0;r<H.length;r++)if(T=H[r],n=a.hot._acceptedDependencies[T]){if(-1!==M.indexOf(n))continue;M.push(n)}for(r=0;r<M.length;r++){n=M[r];try{n(H)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:H[r],error:e}),t.ignoreErrored||k||(k=e)}}}for(r=0;r<E.length;r++){var R=E[r];u=R.module,c=[u];try{I(u)}catch(e){if("function"==typeof R.errorHandler)try{R.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||k||(k=n),k||(k=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||k||(k=e)}}return k?(l("fail"),Promise.reject(k)):(l("idle"),new Promise((function(e){e(b)})))}var x={};function I(t){if(x[t])return x[t].exports;var n=x[t]={i:t,l:!1,exports:{},hot:u(t),parents:(s=c,c=[],s),children:[]};return e[t].call(n.exports,n,n.exports,a(t)),n.l=!0,n.exports}I.m=e,I.c=x,I.d=function(e,t,n){I.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},I.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},I.t=function(e,t){if(1&t&&(e=I(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(I.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)I.d(n,r,function(t){return e[t]}.bind(null,r));return n},I.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return I.d(t,"a",t),t},I.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},I.p="/Users/saifurrehman/Desktop/POCs/cumulus-bank/Accounts-Microservice/dist",I.h=function(){return o},a(8)(I.s=8)}([function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("debug")},function(e,t,n){"use strict";(function(e){var r=n(1),o=n.n(r),i=n(4),c=n.n(i),s=n(6),a=n.n(s),u=n(7),d=n(0),p=n(12),l=n(13);d.Promise=Promise;var f=function(){function t(){this.mongoUrl="mongodb://"+process.env.MONGOUSERNAME+":"+process.env.MONGOPASSWORD+"@"+process.env.HOSTNAMEMONGODB+":"+process.env.MONGOPORT+"/admin",this.express=o()(),this.middleware(),this.routes(),this.mongoSetup()}return t.prototype.mongoSetup=function(){d.Promise=global.Promise,d.connect(this.mongoUrl)},t.prototype.middleware=function(){this.express.use((function(e,t,n){t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Headers","X-Requested-With,content-type"),t.header("Access-Control-Allow-Methods","GET, POST, OPTIONS, PUT, PATCH, DELETE"),n()})),this.express.use(c.a.json()),this.express.use(c.a.urlencoded({extended:!1})),this.express.use(a()({secret:"test123",saveUninitialized:!1,resave:!0})),this.express.use(o.a.static(e+"/public"))},t.prototype.routes=function(){this.express.get("/",(function(e,t){l({method:"POST",uri:"https://9.30.160.236:31046/topics/LedgerFeed/records",headers:{"Content-Type":"application/json",Authorization:"Bearer hedS4cZlehLctvfnJAdvmSzonSbsCFDUGHwhNnyakDOR"},body:JSON.stringify({name:"testtt"}),agentOptions:{ca:p.readFileSync("./public/es-cert.pem")}},(function(e,n,r){t.send("hi"),console.log(n)}))})),this.express.use("/",u.a)},t}();t.a=(new f).express}).call(this,"/")},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("http")},function(e,t){e.exports=require("express-session")},function(e,t,n){"use strict";var r=n(1),o=n(0),i=o.Schema,c=new i({Product:String,Price:Number,Type:String,Payed:Boolean}),s=new i({Product:String,Price:Number,AccountID:String,AccountName:String,Type:String,Date:String}),a=new i({Activate:Boolean,Balance:Number,CuurentSpending:Number,AccountName:String}),u=new i({Balance:Number,CuurentSpending:Number,AccountName:String}),d=new i({ID:Number,Account:[a],CurrentAccount:[u],Transaction:[s],Billing:[c]}),p=o.model("Account",d),l=function(){function e(){}return e.prototype.addNewAccount=function(e,t){t.setHeader("Content-Type","application/json"),new p(e.body).save((function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.getAccount=function(e,t){t.setHeader("Content-Type","application/json"),p.find({},(function(e,n){e?t.status(404).json({err:e}):t.status(200).send(n)}))},e.prototype.getAccountById=function(e,t){t.setHeader("Content-Type","application/json"),p.findById(e.params.ID,(function(e,n){e?t.status(404).json({err:e}):t.status(200).send(n)}))},e.prototype.getAccountByID=function(e,t){t.setHeader("Content-Type","application/json"),p.find({ID:e.params.ID},(function(e,n){e?t.status(404).json({err:e}):t.status(200).send(n)}))},e.prototype.updateAccount=function(e,t){t.setHeader("Content-Type","application/json"),p.findOneAndUpdate({_id:e.params.ID},e.body,{new:!0},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.activate=function(e,t){t.setHeader("Content-Type","application/json"),p.update({"Account._id":e.body.ID},{$set:{"Account.$.Activate":!0,"Account.$.Balance":1e4}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.paybill=function(e,t){t.setHeader("Content-Type","application/json"),p.update({"Billing._id":e.body.ID},{$set:{"Billing.$.Payed":!0,"Billing.$.Price":0}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.balanceUpdate=function(e,t){t.setHeader("Content-Type","application/json"),p.update({"Account._id":e.body.ID},{$set:{"Account.$.Balance":e.body.balance}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.addTransaction=function(e,t){t.setHeader("Content-Type","application/json"),p.update({_id:e.body.ID},{$push:{Transaction:{Product:e.body.Product,Price:e.body.Price,AccountID:e.body.AccountID,AccountName:e.body.AccountName,Type:e.body.Type,Date:e.body.Date}}},(function(e,n){e?t.status(404).json({err:e}):t.json(n)}))},e.prototype.deleteAccount=function(e,t){t.setHeader("Content-Type","application/json"),p.deleteOne({_id:e.params.ID},(function(e){e?t.status(404).json({err:e}):t.json({message:"success"})}))},e}(),f=(n(11),function(){function e(){this.accountController=new l,this.router=Object(r.Router)(),this.routes()}return e.prototype.routes=function(){this.router.get("/healthz",(function(e,t){t.status(200).send({success:"ok"})})),this.router.get("/listAccount",(function(e,t,n){n()}),this.accountController.getAccount),this.router.post("/listAccount",(function(e,t,n){n()}),this.accountController.addNewAccount),this.router.post("/activate",(function(e,t,n){n()}),this.accountController.activate),this.router.post("/bill",(function(e,t,n){n()}),this.accountController.paybill),this.router.post("/balanceUpdate",(function(e,t,n){n()}),this.accountController.balanceUpdate),this.router.post("/transaction",(function(e,t,n){n()}),this.accountController.addTransaction),this.router.get("/listAccount/:ID",(function(e,t,n){n()}),this.accountController.getAccountById),this.router.get("/listAccountID/:ID",(function(e,t,n){n()}),this.accountController.getAccountByID),this.router.put("/listAccount/:ID",(function(e,t,n){n()}),this.accountController.updateAccount),this.router.delete("/listAccount/:ID",(function(e,t,n){n()}),this.accountController.deleteAccount)},e}());t.a=(new f).router},function(e,t,n){n(9),e.exports=n(10)},function(e,t){e.exports=require("@babel/polyfill")},function(e,t,n){"use strict";n.r(t);var r=n(5),o=n.n(r),i=n(2),c=n.n(i),s=n(3);c()("ts-express:server"),new function(){var e=this;this.normalizePort=function(e){var t="string"==typeof e?parseInt(e,10):e;return isNaN(t)?e:t>=0&&t},this.onError=function(t){if("listen"!==t.syscall)throw t;var n="string"==typeof e.port?"Pipe "+e.port:"Port "+e.port;switch(t.code){case"EACCES":console.error(n+" requires elevated privileges"),process.exit(1);break;case"EADDRINUSE":console.error(n+" is already in use"),process.exit(1);break;default:throw t}},this.onListening=function(){console.log("listening on "+e.port);var t=e.server.address(),n="string"==typeof t?"pipe "+t:"port "+t.port;c()("Listening on "+n)},this.port=this.normalizePort(7e3),s.a.set("port",this.port),this.server=o.a.createServer(s.a),this.server.listen(this.port),this.server.on("error",this.onError),this.server.on("listening",this.onListening)}},function(e,t){e.exports=require("reflect-metadata")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("request")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,